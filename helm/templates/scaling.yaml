{{ if .Values.scheduledScaling.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scaling-service-account
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: scaling-role
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: ["apps"] # API group for Deployments
  resources: 
  - "deployments"
  - "deployments/scale"
  verbs:
  - "get"
  - "list"
  - "watch"
  - "patch"
  - "update"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: scaling-role-binding
  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: scaling-service-account
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: scaling-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scaling-deployment
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scaling
  template:
    metadata:
      labels:
        app: scaling
    spec:
      serviceAccountName: scaling-service-account
      containers:
      - name: scaler
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          #!/bin/bash
          # Schedule configurations JSON array
          scheduleConfigsJson={{ toJson .Values.scheduledScaling.config }}

          echo "Booting..."
          echo "Raw Schedule configurations:"
          echo "$scheduleConfigsJson"

          echo "Parsed Schedule configurations:"
          echo "$scheduleConfigsJson" | jq . 2>&1
          if [ $? -ne 0 ]; then
            echo "Invalid JSON"
            exit 1
          fi
          echo "Boot Successful"

          while true; do
            # Get current day and hour
            currentDay=$(date +%u)  # Day of the week (1-7, Monday is 1)
            currentHour=$(date +%H) # Hour of the day (00-23)

            echo "----------------------------------"
            echo "Current day: $currentDay"
            echo "Current hour: $currentHour"

            # Iterate over each scheduleConfig
            echo "$scheduleConfigsJson" | jq -c '.[]' | while read -r scheduleConfigJson; do
              echo "----------------------------------"
              # Extract fields from the current scheduleConfig
              scheduleName=$(echo "$scheduleConfigJson" | jq -r '.name')
              startHour=$(echo "$scheduleConfigJson" | jq -r '.startHour')
              endHour=$(echo "$scheduleConfigJson" | jq -r '.endHour')
              days=$(echo "$scheduleConfigJson" | jq -r '.days')
              replicas=$(echo "$scheduleConfigJson" | jq -r '.replicas')

              echo "Checking schedule: $scheduleName"
              echo "Start hour: $startHour, End hour: $endHour"
              echo "Days: $days, Replicas: $replicas"

              if [[ $currentHour -ge $startHour && $currentHour -lt $endHour && $days == *$currentDay* ]]; then
                echo "Scaling for $scheduleName to $replicas replicas"
                echo kubectl scale deployment {{ .Values.name }}-deploy --replicas=$replicas
                break
              else
                echo "Not scaling for $scheduleName"
              fi
            done
            sleep 10
          done

{{- end }}